{"version":3,"sources":["App.tsx","Good/Good.tsx","index.tsx"],"names":["SortType","Good","good","goodsFromServer","App","useState","None","sortType","setSortType","isReversed","setIsReversed","goods","finalGoods","sort","good1","good2","Alphabet","localeCompare","Length","length","reverse","getFinalGoods","isModified","className","type","cn","onClick","map","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0ECfQC,EAAwB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACnC,oBAAI,UAAQ,OAAZ,SAAoBA,KDCTC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGH,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAuCE,IAAMI,EAAgB,WAC3B,MAAgCC,mBAASL,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EA/BR,SACEA,EADF,GAGG,IADCJ,EACF,EADEA,SAAUE,EACZ,EADYA,WAERG,EAAU,YAAOD,GAqBrB,OAnBIJ,GACFK,EAAWC,MAAK,SAACC,EAAOC,GACtB,OAAQR,GACN,KAAKP,EAASgB,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKf,EAASkB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXV,IACFG,EAAaA,EAAWQ,WAGnBR,EAMOS,CAAclB,EAAiB,CAAEI,WAAUE,eACnDa,EAAab,KAAgBF,EAOnC,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UAAW,CACjC,WAAYlB,IAAaP,EAASgB,WAEpCU,QAAS,kBAAMlB,EAAYR,EAASgB,WALtC,iCAUA,wBACEQ,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYlB,IAAaP,EAASkB,SAEpCQ,QAAS,kBAAMlB,EAAYR,EAASkB,SALtC,4BAUA,wBACEM,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,YAAahB,IAEfiB,QAAS,kBAAMhB,GAAeD,IALhC,qBAUCa,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QA1CV,WACElB,EAAYR,EAASM,MACrBI,GAAc,IAqCR,sBAUJ,6BACE,6BACGC,EAAMgB,KAAI,SAAAzB,GAAI,OACb,cAAC,EAAD,CAAMA,KAAMA,GAAWA,cEjHnC0B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.148b6641.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { Good } from './Good';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  None,\n  Alphabet,\n  Length,\n}\n\ninterface ReorderingParams {\n  sortType: SortType;\n  isReversed: boolean;\n}\n\nfunction getFinalGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderingParams,\n) {\n  let finalGoods = [...goods];\n\n  if (sortType) {\n    finalGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.Alphabet:\n          return good1.localeCompare(good2);\n\n        case SortType.Length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    finalGoods = finalGoods.reverse();\n  }\n\n  return finalGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.None);\n  const [isReversed, setIsReversed] = useState(false);\n  const goods = getFinalGoods(goodsFromServer, { sortType, isReversed });\n  const isModified = isReversed || !!sortType;\n\n  function reset() {\n    setSortType(SortType.None);\n    setIsReversed(false);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortType !== SortType.Alphabet,\n          })}\n          onClick={() => setSortType(SortType.Alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortType !== SortType.Length,\n          })}\n          onClick={() => setSortType(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {isModified && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {goods.map(good => (\n            <Good good={good} key={good} />\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","type Props = {\n  good: string;\n};\n\nexport const Good: React.FC<Props> = ({ good }) => (\n  <li data-cy=\"Good\">{good}</li>\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}